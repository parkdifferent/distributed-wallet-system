package com.wallet.command.model;

import com.wallet.command.event.BaseEvent;
import lombok.Builder;
import lombok.Data;

import java.util.ArrayList;
import java.util.List;

/**
 * Result object for command execution
 */
@Data
@Builder
public class CommandResult {
    /**
     * Whether the command execution was successful
     */
    private boolean successful;

    /**
     * Error message if command failed
     */
    private String errorMessage;

    /**
     * List of events generated by the command
     */
    @Builder.Default
    private List<BaseEvent> events = new ArrayList<>();

    /**
     * Final version after command execution
     */
    private Long finalVersion;

    /**
     * Create a successful result with events
     */
    public static CommandResult success(List<BaseEvent> events, Long finalVersion) {
        return CommandResult.builder()
            .successful(true)
            .events(events)
            .finalVersion(finalVersion)
            .build();
    }

    /**
     * Create a successful result with a single event
     */
    public static CommandResult success(BaseEvent event, Long finalVersion) {
        List<BaseEvent> events = new ArrayList<>();
        events.add(event);
        return success(events, finalVersion);
    }

    /**
     * Create a failed result with error message
     */
    public static CommandResult failure(String errorMessage) {
        return CommandResult.builder()
            .successful(false)
            .errorMessage(errorMessage)
            .build();
    }

    /**
     * Create a failed result with error message and events
     */
    public static CommandResult failure(String errorMessage, List<BaseEvent> events) {
        return CommandResult.builder()
            .successful(false)
            .errorMessage(errorMessage)
            .events(events)
            .build();
    }

    /**
     * Add an event to the result
     */
    public void addEvent(BaseEvent event) {
        if (events == null) {
            events = new ArrayList<>();
        }
        events.add(event);
    }

    /**
     * Get the number of events
     */
    public int getEventCount() {
        return events == null ? 0 : events.size();
    }

    /**
     * Check if there are any events
     */
    public boolean hasEvents() {
        return events != null && !events.isEmpty();
    }
}
